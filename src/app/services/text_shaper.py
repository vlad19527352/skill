from __future__ import annotations

import re


def _soft_cut(text: str, max_len: int) -> str:
	if len(text) <= max_len:
		return text
	soft = text[:max_len]
	# –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ –≥—Ä–∞–Ω–∏—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
	m = re.search(r"[\.!?]\s+\S*$", soft)
	if m:
		return soft[:m.end()].strip()
	# –ü–æ—Ç–æ–º –ø–æ –≥—Ä–∞–Ω–∏—Ü–µ —Å–ª–æ–≤–∞
	m2 = re.search(r"\s+\S*$", soft)
	if m2:
		return soft[:m2.start()].strip()
	# –ñ—ë—Å—Ç–∫–∞—è –æ–±—Ä–µ–∑–∫–∞
	return soft.strip()


def shape_to_window(text: str, min_len: int = 600, max_len: int = 800) -> str:
	clean = text.strip()
	if len(clean) <= max_len:
		return clean
	res = _soft_cut(clean, max_len)
	if len(res) < min_len:
		# –µ—Å–ª–∏ –ø–æ—Å–ª–µ –º—è–≥–∫–æ–≥–æ —É—Å–µ—á–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ ‚Äî —Ä–∞—Å—Ç—è–Ω–µ–º –¥–æ max_len
		res = clean[:max_len].rstrip()
	return res


def _remove_service_marks(text: str) -> str:
    # –£–¥–∞–ª—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–º–µ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫/—Å–Ω–æ—Å–æ–∫/–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    patterns = [
        r"\[\d+\]",  # [1]
        r"\[\^\d+\]",  # [^1]
        r"\(–ò—Å—Ç–æ—á–Ω–∏–∫:[^)]*\)",  # (–ò—Å—Ç–æ—á–Ω–∏–∫: ...)
        r"\(Source:[^)]*\)",  # (Source: ...)
        r"^\s*(–°—Å—ã–ª–∫–∏|References)\s*:\s*.*$",  # —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Å—ã–ª–æ–∫
    ]
    cleaned = text
    for p in patterns:
        cleaned = re.sub(p, "", cleaned, flags=re.IGNORECASE | re.MULTILINE)
    # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–æ–±–µ–ª—ã –∏ –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    cleaned = re.sub(r"[ \t]{2,}", " ", cleaned)
    cleaned = re.sub(r"\n{3,}", "\n\n", cleaned)
    return cleaned.strip()


def _paragraphize(text: str, target_len: int = 800) -> str:
    # –î–µ–ª–∏–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —Å–æ–±–∏—Ä–∞–µ–º –∞–±–∑–∞—Ü—ã –ø–æ 2‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ ~300‚Äì400 —Å–∏–º–≤–æ–ª–æ–≤
    sentences = re.split(r"(?<=[.!?])\s+", text)
    paragraphs = []
    current = []
    current_len = 0
    for s in sentences:
        if not s:
            continue
        current.append(s)
        current_len += len(s) + 1
        if len(current) >= 3 or current_len >= 360:
            paragraphs.append(" ".join(current).strip())
            current = []
            current_len = 0
    if current:
        paragraphs.append(" ".join(current).strip())
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –Ω–∞—á–∞–ª—É –∫–∞–∂–¥–æ–≥–æ –∞–±–∑–∞—Ü–∞
    emojis = ["‚ú®", "üí°", "‚úÖ", "üìå", "üîπ", "üß†", "üöÄ"]
    decorated = []
    for idx, p in enumerate(paragraphs):
        emoji = emojis[idx % len(emojis)]
        decorated.append(f"{emoji} {p}")
    result = "\n\n".join(decorated)
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–æ–¥–∂–∏–º–∞–µ–º –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –æ–∫–Ω–∞
    return _soft_cut(result, target_len)


def prettify_answer(text: str) -> str:
    no_marks = _remove_service_marks(text)
    return _paragraphize(no_marks, target_len=800)

